#include  <algorithm>
#include <iostream>
#include <array>
#include <cmath>

const int MAX_LIMIT_A = 999;
const int MAX_LIMIT_B = 1000;
const int MAX_PRIMES_ARRAY = 1000;
/**
 * @Brief:
 * The algorithm aims to find the product of the coefficients a and b that produce the maximum
 * number of consecutive prime numbers for the quadratic expression n^2 + an + b, where n starts
 * from 0. It first initializes an array of boolean values to identify prime numbers up to 1000.
 * Then, for each possible b (from 2 to 1000) and each a (from -b to 999), it calculates the number
 * of consecutive primes generated by the quadratic expression. If this number exceeds the current
 * maximum, it updates the maximum and stores the product a*b.
 */

 /// Returns whether n is prime.
bool is_prime(int n) {
    if (n < 2) return false;
    for (int i = 2; i * i < n; i++) {
        if (n % i == 0) { return false; }
    }
    return true;
}

/// Returns whether n is prime.
bool is_prime(int n, const std::array<bool, MAX_PRIMES_ARRAY>& primes) {
    return (n < MAX_PRIMES_ARRAY && primes[n]) || (n >= MAX_PRIMES_ARRAY && is_prime(n));
}

/// Get the amount of consecutive primes for given a and b.
int get_primes_amount(int a, int b, const std::array<bool, MAX_PRIMES_ARRAY>& primes) {
    int n = 0;
    while (true) {
        int candidate = (n * n) + (a * n) + b;
        if (!is_prime(candidate, primes)) {
            return n - 1;
        }
        n++;
    }
}

/// Initializes array of primes.
void initialize_primes(std::array<bool, MAX_PRIMES_ARRAY>& primes) {
    for (int i = 0; i < MAX_PRIMES_ARRAY; i++) {
        primes[i] = is_prime(i);
    }

}

/// Main function.
int main() {
    std::array<bool, MAX_PRIMES_ARRAY> primes;
    initialize_primes(primes);

    int max_amount = 0;
    int max_ab = 0;
    for (int b = 2; b <= MAX_LIMIT_B; b++) {
        if (is_prime(b, primes)) {
            for (int a = -b; a <= MAX_LIMIT_A; a++) {
                int value = get_primes_amount(a, b, primes);
                if (value > max_amount) {
                    max_amount = value;
                    max_ab = a * b;
                }
            }
        }
    }
    std::cout << "a * b: " << max_ab << std::endl;
}